{
    "Parameters": {
        "VPCID": {
            "Type": "String",
            "Description": "Shared Infrastructure VPC to use"
        },
        "PUBLICRT": {
            "Type": "String",
            "Description": "Shared Infrastructure Public Route Table"
        },
        "PRIVATERTA": {
            "Type": "String",
            "Description": "Shared Infrastructure Private Route Table - A"
        },
        "PRIVATERTB": {
            "Type": "String",
            "Description": "Shared Infrastructure Private Route Table - B"
        },
        "APPVERSION": {
            "Type": "String",
            "Description": "Application Version to Deploy"
        },
        "ENVIRONMENT": {
            "Type": "String",
            "Description": "Type of environment to provision",
            "Default": "DEV",
            "AllowedValues": ["DEV", "TEST", "PROD", "PRESALES"]
        },
        "APPPublicCIDRA": {
            "Type": "String",
            "Description": "CIDR to use for public subnet A for app environment.",
            "MinLength": "9",
            "MaxLength": "18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid CIDR range in the form x.x.x.x/22"
        },
        "APPPublicCIDRB": {
            "Type": "String",
            "Description": "CIDR to use for public subnet B for app environment.",
            "MinLength": "9",
            "MaxLength": "18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid CIDR range in the form x.x.x.x/22"
        },
        "APPPrivateCIDRA": {
            "Type": "String",
            "Description": "CIDR to use for private subnet A for app environment.",
            "MinLength": "9",
            "MaxLength": "18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid CIDR range in the form x.x.x.x/22"
        },
        "APPPrivateCIDRB": {
            "Type": "String",
            "Description": "CIDR to use for private subnet B for app environment.",
            "MinLength": "9",
            "MaxLength": "18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid CIDR range in the form x.x.x.x/22"
        }
    },
    "Mappings": {
        "RegionMap": {
            "us-east-1": {
                "AMIFORLINUX": "ami-00000000000000000"
            },
            "us-east-2": {
                "AMIFORLINUX": "ami-00000000000000000"
            },
            "us-west-1": {
                "AMIFORLINUX": "ami-00000000000000000"
            },
            "us-west-2": {
                "AMIFORLINUX": "ami-00000000000000000"
            },
            "sa-east-1": {
                "AMIFORLINUX": "ami-00000000000000000"
            },
            "ca-central-1": {
                "AMIFORLINUX": "ami-00000000000000000"
            },
            "eu-west-1": {
                "AMIFORLINUX": "ami-00000000000000000"
            },
            "eu-west-2": {
                "AMIFORLINUX": "ami-00000000000000000"
            },
            "eu-west-3": {
                "AMIFORLINUX": "ami-00000000000000000"
            },
            "eu-central-1": {
                "AMIFORLINUX": "ami-00000000000000000"
            },
            "ap-southeast-1": {
                "AMIFORLINUX": "ami-00000000000000000"
            },
            "ap-southeast-2": {
                "AMIFORLINUX": "ami-00000000000000000"
            },
            "ap-northeast-1": {
                "AMIFORLINUX": "ami-00000000000000000"
            },
            "ap-northeast-2": {
                "AMIFORLINUX": "ami-00000000000000000"
            },
            "ap-south-1": {
                "AMIFORLINUX": "ami-00000000000000000"
            },
            "cn-north-1": {
                "AMIFORLINUX": "ami-00000000000000000"
            }
        },

        "InstanceSize": {
            "DEV": {
                "EC2": "t2.micro"
            },
            "TEST": {
                "EC2": "t2.micro"
            },
            "PROD": {
                "EC2": "t2.small"
            },
            "PRESALES": {
                "EC2": "t2.micro"
            }
        }
    },
    "Resources": {
        "SubnetPublicA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": ["0", {
                        "Fn::GetAZs": ""
                    }]
                },
                "CidrBlock": {
                    "Ref": "APPPublicCIDRA"
                },
                "MapPublicIpOnLaunch": "true",
                "VpcId": {
                    "Ref": "VPCID"
                }
            }
        },
        "SubnetPublicB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": ["1", {
                        "Fn::GetAZs": ""
                    }]
                },
                "CidrBlock": {
                    "Ref": "APPPublicCIDRB"
                },
                "MapPublicIpOnLaunch": "true",
                "VpcId": {
                    "Ref": "VPCID"
                }
            }
        },
        "SubnetPrivateA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": ["0", {
                        "Fn::GetAZs": ""
                    }]
                },
                "CidrBlock": {
                    "Ref": "APPPrivateCIDRA"
                },
                "MapPublicIpOnLaunch": "false",
                "VpcId": {
                    "Ref": "VPCID"
                }
            }
        },
        "SubnetPrivateB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": ["1", {
                        "Fn::GetAZs": ""
                    }]
                },
                "CidrBlock": {
                    "Ref": "APPPrivateCIDRB"
                },
                "MapPublicIpOnLaunch": "false",
                "VpcId": {
                    "Ref": "VPCID"
                }
            }
        },
        "SubnetRouteTableAssociatePublicA": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PUBLICRT"
                },
                "SubnetId": {
                    "Ref": "SubnetPublicA"
                }
            }
        },
        "SubnetRouteTableAssociatePublicB": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PUBLICRT"
                },
                "SubnetId": {
                    "Ref": "SubnetPublicB"
                }
            }
        },
        "SubnetRouteTableAssociatePrivateA": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PRIVATERTA"
                },
                "SubnetId": {
                    "Ref": "SubnetPrivateA"
                }
            }
        },
        "SubnetRouteTableAssociatePrivateB": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PRIVATERTB"
                },
                "SubnetId": {
                    "Ref": "SubnetPrivateB"
                }
            }
        },
        "ELB": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "CrossZone": "true",
                "Instances": [{
                    "Ref": "EC2"
                }],
                "Listeners": [{
                    "InstancePort": "80",
                    "InstanceProtocol": "HTTP",
                    "LoadBalancerPort": "80",
                    "Protocol": "HTTP"
                }],
                "Subnets": [{
                        "Ref": "SubnetPublicA"
                    },
                    {
                        "Ref": "SubnetPublicB"
                    }
                ],
                "SecurityGroups": [{
                    "Ref": "SG"
                }]
            }
        },
        "SG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": {
                    "Fn::Join": ["", ["Stack", {
                        "Ref": "AWS::StackId"
                    }, " Application V", {
                        "Ref": "APPVERSION"
                    }, " - ", {
                        "Ref": "ENVIRONMENT"
                    }]]
                },
                "VpcId": {
                    "Ref": "VPCID"
                },
                "SecurityGroupIngress": [{
                        "CidrIp": "0.0.0.0/0",
                        "IpProtocol": "tcp",
                        "ToPort": "80",
                        "FromPort": "80"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "IpProtocol": "tcp",
                        "ToPort": "22",
                        "FromPort": "22"
                    }
                ],
                "SecurityGroupEgress": [{
                    "CidrIp": "0.0.0.0/0",
                    "ToPort": "-1",
                    "IpProtocol": "-1"
                }]
            }
        },
        "EC2": {
            "Type": "AWS::EC2::Instance",
            "DeletionPolicy": "Delete",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT5M"
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": ["RegionMap", {
                        "Ref": "AWS::Region"
                    }, "AMIFORLINUX"]
                },
                "InstanceType": {
                    "Fn::FindInMap": ["InstanceSize", {
                        "Ref": "ENVIRONMENT"
                    }, "EC2"]
                },
                "KeyName": "AdvancedCFN",
                "SecurityGroupIds": [{
                    "Ref": "SG"
                }],
                "SubnetId": {
                    "Ref": "SubnetPublicA"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["", [
                            "#!/bin/bash", "\n",
                            "yum install httpd php mysql php-mysql -y", "\n",
                            "yum update -y", "\n",
                            "chkconfig httpd on", "\n",
                            "service httpd start", "\n",
                            "cd /var/www/html", "\n",
                            "wget https://wordpress.org/latest.tar.gz", "\n",
                            "tar -zxvf latest.tar.gz --strip 1", "\n",
                            "rm latest.tar.gz", "\n",
                            "cp wp-config-sample.php wp-config.php", "\n",
                            "sed -i 's/database_name_here/", {
                                "Ref": "DatabaseName"
                            }, "/g' wp-config.php", "\n",
                            "sed -i 's/localhost/", {
                                "Fn::GetAtt": ["DB", "Endpoint.Address"]
                            }, "/g' wp-config.php", "\n",
                            "sed -i 's/username_here/", {
                                "Ref": "DatabaseUser"
                            }, "/g' wp-config.php", "\n",
                            "sed -i 's/password_here/", {
                                "Ref": "DatabasePassword"
                            }, "/g' wp-config.php", "\n"
                        ]]
                    }
                }
            }
        },
        "Outputs": {
            "Endpoint": {
                "Description": "Application Endpoint Address",
                "Value": {
                    "Fn::Join": ["", ["http://", {
                        "Fn::GetAtt": ["ELB", "DNSName"]
                    }, "/app.php"]]
                }
            }
        }
    }
}